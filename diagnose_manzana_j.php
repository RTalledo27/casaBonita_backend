<?php

require_once __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Shared\Date;

/**
 * Script de diagn√≥stico espec√≠fico para analizar la manzana J
 * Analiza por qu√© la manzana J se est√° saltando durante la importaci√≥n
 */

echo "=== DIAGN√ìSTICO ESPEC√çFICO MANZANA J ===\n\n";

// Simulaci√≥n basada en los datos proporcionados por el usuario
echo "üìÅ Simulando an√°lisis basado en datos proporcionados por el usuario\n";
echo "üìä La manzana J tiene 55 lotes con cuotas espec√≠ficas\n\n";

// Datos simulados basados en la informaci√≥n del usuario
$headerRow = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];
$financingRow = ['CONTADO', '72', '48', 'no disponible', 'CONTADO', '60', '84', '96', '108', '55', 'CONTADO', '36'];
$dataRow = ['456.40', '456.40', '456.40', '0', '456.40', '456.40', '456.40', '456.40', '456.40', '456.40', '456.40', '456.40'];

echo "üìã Simulando an√°lisis de Excel con datos reales\n\n";
echo "üîç Analizando manzanas A-L\n\n";

echo "=== AN√ÅLISIS DE HEADERS (Fila 1) ===\n";
    $jColumnIndex = null;
    
    foreach ($headerRow as $index => $header) {
        $cleanHeader = trim($header);
        $isJ = ($cleanHeader === 'J');
        
        if ($isJ) {
            $jColumnIndex = $index;
            echo "üéØ COLUMNA J ENCONTRADA:\n";
        } else {
            echo "Columna {$index}: ";
        }
        
        echo "  - √çndice: {$index}\n";
        echo "  - Valor original: '" . ($header ?? 'NULL') . "'\n";
        echo "  - Valor limpio: '" . $cleanHeader . "'\n";
        echo "  - Longitud: " . strlen($cleanHeader) . "\n";
        echo "  - Es letra √∫nica A-Z: " . (preg_match('/^[A-Z]$/', $cleanHeader) ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
        echo "  - C√≥digos ASCII: [" . implode(', ', array_map('ord', str_split($cleanHeader))) . "]\n";
        
        if ($isJ) {
            echo "  - üî• ESTA ES LA MANZANA J üî•\n";
        }
        
        echo "\n";
    }
    
    if ($jColumnIndex === null) {
        echo "‚ùå ERROR CR√çTICO: No se encontr√≥ la columna J en los headers\n";
        echo "Headers encontrados: " . implode(', ', array_map(function($h) { return "'$h'"; }, $headerRow)) . "\n";
        exit(1);
    }
    
    echo "\n=== AN√ÅLISIS DEL VALOR DE FINANCIAMIENTO PARA MANZANA J (Fila 2) ===\n";
    
    $jFinancingValue = $financingRow[$jColumnIndex] ?? null;
    $jFinancingValueClean = trim($jFinancingValue);
    
    echo "üéØ VALOR DE FINANCIAMIENTO PARA MANZANA J:\n";
    echo "  - √çndice de columna: {$jColumnIndex}\n";
    echo "  - Valor original: '" . ($jFinancingValue ?? 'NULL') . "'\n";
    echo "  - Valor limpio: '" . $jFinancingValueClean . "'\n";
    echo "  - Longitud: " . strlen($jFinancingValueClean) . "\n";
    echo "  - Est√° vac√≠o: " . (empty($jFinancingValueClean) ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
    echo "  - Es num√©rico: " . (is_numeric($jFinancingValueClean) ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
    
    if (is_numeric($jFinancingValueClean)) {
        $numericValue = (int)$jFinancingValueClean;
        echo "  - Valor num√©rico: {$numericValue}\n";
        echo "  - Es mayor que 0: " . ($numericValue > 0 ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
    }
    
    echo "  - Es 'CONTADO': " . (strtoupper($jFinancingValueClean) === 'CONTADO' ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
    echo "  - Es 'CASH': " . (strtoupper($jFinancingValueClean) === 'CASH' ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
    echo "  - C√≥digos ASCII: [" . implode(', ', array_map('ord', str_split($jFinancingValueClean))) . "]\n";
    
    echo "\n=== SIMULACI√ìN DE L√ìGICA DE DETECCI√ìN ===\n";
    
    $shouldBeDetected = false;
    $detectionReason = '';
    
    if (strtoupper($jFinancingValueClean) === 'CONTADO' || strtoupper($jFinancingValueClean) === 'CASH') {
        $shouldBeDetected = true;
        $detectionReason = 'Pago al contado';
    } elseif (is_numeric($jFinancingValueClean) && (int)$jFinancingValueClean > 0) {
        $shouldBeDetected = true;
        $detectionReason = 'Financiamiento en cuotas: ' . (int)$jFinancingValueClean;
    } else {
        $shouldBeDetected = false;
        $detectionReason = 'Valor no v√°lido - no es CONTADO ni num√©rico > 0';
    }
    
    echo "üîç RESULTADO DE LA SIMULACI√ìN:\n";
    echo "  - ¬øDeber√≠a ser detectada?: " . ($shouldBeDetected ? '‚úÖ S√ç' : '‚ùå NO') . "\n";
    echo "  - Raz√≥n: {$detectionReason}\n";
    
    if (!$shouldBeDetected) {
        echo "\n‚ùå PROBLEMA IDENTIFICADO:\n";
        echo "La manzana J se est√° saltando porque el valor '{$jFinancingValueClean}' no cumple con las condiciones:\n";
        echo "  1. No es 'CONTADO' o 'CASH'\n";
        echo "  2. No es un n√∫mero v√°lido mayor que 0\n";
        
        echo "\nüîß POSIBLES SOLUCIONES:\n";
        echo "  1. Verificar que el valor en la fila 2, columna J sea un n√∫mero (ej: 55, 72, etc.)\n";
        echo "  2. Verificar que no haya espacios o caracteres especiales\n";
        echo "  3. Verificar que la celda no est√© formateada como texto\n";
    } else {
        echo "\n‚úÖ LA MANZANA J DEBER√çA SER DETECTADA CORRECTAMENTE\n";
        echo "Si a√∫n as√≠ se est√° saltando, el problema podr√≠a estar en:\n";
        echo "  1. La l√≥gica de detecci√≥n en el c√≥digo\n";
        echo "  2. Problemas de codificaci√≥n de caracteres\n";
        echo "  3. Diferencias en el procesamiento del archivo\n";
    }
    
    echo "\n=== MUESTRA DE DATOS DE LOTES (Fila 3) ===\n";
    
    $jDataValue = $dataRow[$jColumnIndex] ?? null;
    echo "üéØ PRIMER LOTE DE MANZANA J:\n";
    echo "  - Valor: '" . ($jDataValue ?? 'NULL') . "'\n";
    echo "  - Tipo: " . gettype($jDataValue) . "\n";
    
    echo "\n=== RESUMEN FINAL ===\n";
    echo "üìä Columna J encontrada en √≠ndice: {$jColumnIndex}\n";
    echo "üí∞ Valor de financiamiento: '{$jFinancingValueClean}'\n";
    echo "üéØ Estado de detecci√≥n: " . ($shouldBeDetected ? '‚úÖ DEBER√çA FUNCIONAR' : '‚ùå PROBLEMA IDENTIFICADO') . "\n";
    echo "üìù Raz√≥n: {$detectionReason}\n";

echo "\n=== DIAGN√ìSTICO COMPLETADO ===\n";